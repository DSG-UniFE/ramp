
package it.unibo.deis.lia.ramp;

import java.awt.event.ActionEvent;
import java.util.ArrayList;

import it.unibo.deis.lia.ramp.core.internode.ContinuityManager;
import it.unibo.deis.lia.ramp.core.internode.Layer3RoutingManager;
//import it.unibo.deis.lia.ramp.service.upnp.UpnpProxyEntrypoint;

import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.TitledBorder;
import javax.swing.border.EtchedBorder;

/**
 * @author Carlo Giannelli
 */
public class RampGUIJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    private RampEntryPoint ramp;

    private java.awt.Image rampLogo;
    private java.util.Vector<java.awt.Image> vectorLogo;

    public void visible(boolean flag) {
        this.setVisible(flag);
    }

    // Creates new form RampGUIJFrame
    public RampGUIJFrame(RampEntryPoint rampEntryPoint) throws Exception {
        // rampLogo and vectorLogo initialization must be before initComponents()
        // Dmitrij new logo
        rampLogo = new ImageIcon("./images/ramp_logo.png").getImage();
        //rampLogo = new ImageIcon("./images/ramp_logo.jpg").getImage();
        vectorLogo = new java.util.Vector<java.awt.Image>();
        vectorLogo.addElement(rampLogo);

        initComponents();

        this.ramp = rampEntryPoint;

        // refreshing data
        jButtonRefreshNeighborsActionPerformed(null);
        jButtonRefreshNeighborsActionPerformed(null);
        jButtonRefreshLocalServicesActionPerformed(null);
        jButtonRefreshLocalClientsActionPerformed(null);
        jTextFieldCurrentLocalNodeId.setText(ramp.getNodeIdString());
        jCheckBoxBufferSizeManagerActionPerformed(null);
        jCheckBoxContinuityManagerActionPerformed(null);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (ramp != null) {
                    ramp.stopRamp();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonRefreshLocalServices = new javax.swing.JButton();
        jButtonRefreshLocalClients = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaLocalServices = new javax.swing.JTextArea();
        jComboBoxLocalServices = new javax.swing.JComboBox();
        jButtonStartSelectedService = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaLocalClients = new javax.swing.JTextArea();
        jComboBoxLocalClients = new javax.swing.JComboBox();
        jButtonStartLocalClients = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxLayer3RoutingManager = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jTextFieldCurrentLocalNodeId = new javax.swing.JTextField();
        //jButtonSetLocalNodeId = new javax.swing.JButton();
        //jTextFieldNewLocalNodeId = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonRefreshNeighbors = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jButtonRefreshResolver = new javax.swing.JButton();
        jButtonRefreshResolver.setEnabled(false);
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaResolverDatabase = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabelLogging = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RAMP Middleware");
        setIconImage(rampLogo);
        setIconImages(vectorLogo);
        setLocationByPlatform(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Applications"));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("local services");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("local clients");

        jButtonRefreshLocalServices.setText("refresh local services");
        jButtonRefreshLocalServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshLocalServicesActionPerformed(evt);
            }
        });

        jButtonRefreshLocalClients.setText("refresh local clients");
        jButtonRefreshLocalClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshLocalClientsActionPerformed(evt);
            }
        });

        jTextAreaLocalServices.setColumns(20);
        jTextAreaLocalServices.setEditable(false);
        jTextAreaLocalServices.setRows(5);
        jScrollPane3.setViewportView(jTextAreaLocalServices);

        jComboBoxLocalServices.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

        jButtonStartSelectedService.setText("start selected service");
        jButtonStartSelectedService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartSelectedServiceActionPerformed(evt);
            }
        });

        jTextAreaLocalClients.setColumns(20);
        jTextAreaLocalClients.setEditable(false);
        jTextAreaLocalClients.setRows(5);
        jScrollPane4.setViewportView(jTextAreaLocalClients);

        jComboBoxLocalClients.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        jComboBoxLocalClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLocalClientsActionPerformed(evt);
            }
        });

        jButtonStartLocalClients.setText("start selected client");
        jButtonStartLocalClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartLocalClientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gl_jPanel1 = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(gl_jPanel1);
        gl_jPanel1.setHorizontalGroup(
                gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel1.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(gl_jPanel1.createSequentialGroup()
                                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                                        .addComponent(jButtonStartSelectedService, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                                        .addComponent(jComboBoxLocalServices, 0, 188, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                                        .addComponent(jComboBoxLocalClients, 0, 182, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                                        .addComponent(jButtonStartLocalClients, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)))
                                        .addGroup(gl_jPanel1.createSequentialGroup()
                                                .addComponent(jButtonRefreshLocalServices, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                                .addGap(10, 10, 10)
                                                .addComponent(jButtonRefreshLocalClients, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        gl_jPanel1.setVerticalGroup(
                gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel1.createSequentialGroup()
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonRefreshLocalServices, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonRefreshLocalClients, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)) //Added by Dmitrij
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxLocalServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxLocalClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(gl_jPanel1.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonStartSelectedService)
                                        .addComponent(jButtonStartLocalClients))
                                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Components Activation"));

        jCheckBoxLayer3RoutingManager.setText("OS-based Routing");
        jCheckBoxLayer3RoutingManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLayer3RoutingManagerActionPerformed(evt);
            }
        });

        JPanel panel = new JPanel();
        panel.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));

        jCheckBoxUpnpProxy = new JCheckBox();
        jCheckBoxUpnpProxy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                jCheckBoxUpnpProxyActionPerformed(arg0);
            }


        });
        jCheckBoxUpnpProxy.setText("UPnP Proxy");
        jPanel4 = new javax.swing.JPanel();
        jTextFieldCurrentBufferSizeManager = new javax.swing.JTextField();
        jButtonChangeLocalBufferSize = new javax.swing.JButton();
        jTextFieldNewLocalBufferSize = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();

        jPanel4.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));

        jTextFieldCurrentBufferSizeManager.setEditable(false);
        jTextFieldCurrentBufferSizeManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCurrentBufferSizeManagerActionPerformed(evt);
            }
        });

        jButtonChangeLocalBufferSize.setText("change local BufferSize");
        jButtonChangeLocalBufferSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeLocalBufferSizeActionPerformed(evt);
            }
        });

        jTextFieldNewLocalBufferSize.setText(" new buffer size");

        jTextField1.setEditable(false);
        jTextField1.setText("  (0 => default)");
        jTextField1.setBorder(null);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jCheckBoxBufferSizeManager = new javax.swing.JCheckBox();

        jCheckBoxBufferSizeManager.setText("BufferSize Manager");
        jCheckBoxBufferSizeManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBufferSizeManagerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gl_jPanel4 = new javax.swing.GroupLayout(jPanel4);
        gl_jPanel4.setHorizontalGroup(
                gl_jPanel4.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel4.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gl_jPanel4.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jButtonChangeLocalBufferSize, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                        .addGroup(gl_jPanel4.createSequentialGroup()
                                                .addComponent(jTextFieldNewLocalBufferSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(5)
                                                .addComponent(jTextField1, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                                        .addComponent(jTextFieldCurrentBufferSizeManager, GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                        .addComponent(jCheckBoxBufferSizeManager))
                                .addContainerGap())
        );
        gl_jPanel4.setVerticalGroup(
                gl_jPanel4.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel4.createSequentialGroup()
                                .addComponent(jCheckBoxBufferSizeManager)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCurrentBufferSizeManager, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jButtonChangeLocalBufferSize)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(gl_jPanel4.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(jTextFieldNewLocalBufferSize, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        jPanel4.setLayout(gl_jPanel4);


        jCheckBoxSecurityManager = new JCheckBox();
        jCheckBoxSecurityManager.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jchckbxWebServerActionPerformed(evt);
            }


        });
        jCheckBoxSecurityManager.setText("RAMP Secure Join");

        javax.swing.GroupLayout gl_jPanel2 = new javax.swing.GroupLayout(jPanel2);
        gl_jPanel2.setHorizontalGroup(
                gl_jPanel2.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel2.createSequentialGroup()
                                .addGroup(gl_jPanel2.createParallelGroup(Alignment.LEADING)
                                        .addComponent(panel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(gl_jPanel2.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jCheckBoxSecurityManager, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(gl_jPanel2.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jCheckBoxUpnpProxy, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(gl_jPanel2.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jCheckBoxLayer3RoutingManager))
                                        .addGroup(gl_jPanel2.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(11, Short.MAX_VALUE))
        );
        gl_jPanel2.setVerticalGroup(
                gl_jPanel2.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel2.createSequentialGroup()
                                .addComponent(panel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxSecurityManager)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxUpnpProxy)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxLayer3RoutingManager)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 107, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jCheckBoxContinuityManager = new javax.swing.JCheckBox();
        jCheckBoxContinuityManager.setSelected(false);
        jCheckBoxContinuityManager.setText("Continuity Manager");
        jCheckBoxContinuityManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxContinuityManagerActionPerformed(evt);
            }
        });

        chckbxPeriodicMultihopBeat = new JCheckBox("Periodic Multihop Beat");
        chckbxPeriodicMultihopBeat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chckbxPeriodicMultihopBeatActionPerformed(evt);
            }
        });
        GroupLayout gl_panel = new GroupLayout(panel);
        gl_panel.setHorizontalGroup(
                gl_panel.createParallelGroup(Alignment.TRAILING)
                        .addGroup(Alignment.LEADING, gl_panel.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
                                        .addComponent(chckbxPeriodicMultihopBeat, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                        .addGroup(gl_panel.createSequentialGroup()
                                                .addComponent(jCheckBoxContinuityManager)
                                                .addContainerGap(10, Short.MAX_VALUE))))
        );
        gl_panel.setVerticalGroup(
                gl_panel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_panel.createSequentialGroup()
                                .addComponent(jCheckBoxContinuityManager)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(chckbxPeriodicMultihopBeat)
                                .addContainerGap())
        );
        panel.setLayout(gl_panel);
        jPanel2.setLayout(gl_jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Node Id"));

        jTextFieldCurrentLocalNodeId.setEditable(false);

        /*jButtonSetLocalNodeId.setText("set node id (empty for privacy)");
        jButtonSetLocalNodeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetLocalNodeIdActionPerformed(evt);
            }
        });*/

        javax.swing.GroupLayout gl_jPanel3 = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(gl_jPanel3);
        gl_jPanel3.setHorizontalGroup(
                gl_jPanel3.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel3.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(gl_jPanel3.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jTextFieldCurrentLocalNodeId, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                        //.addComponent(jButtonSetLocalNodeId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                        //.addComponent(jTextFieldNewLocalNodeId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                )
                                .addContainerGap())
        );
        gl_jPanel3.setVerticalGroup(
                gl_jPanel3.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel3.createSequentialGroup()
                                        .addComponent(jTextFieldCurrentLocalNodeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                //.addComponent(jButtonSetLocalNodeId)
                                //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                //.addComponent(jTextFieldNewLocalNodeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                //.addContainerGap()
                        )
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("RAMP Monitor"));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Neighbors");

        jButtonRefreshNeighbors.setText("show current neighbors");
        jButtonRefreshNeighbors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshNeighborsActionPerformed(evt);
            }
        });
        jButtonForceHeartbeat = new javax.swing.JButton();

        jButtonForceHeartbeat.setText("force neighbors update");
        jButtonForceHeartbeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForceHeartbeatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gl_jPanel5 = new javax.swing.GroupLayout(jPanel5);
        gl_jPanel5.setHorizontalGroup(
                gl_jPanel5.createParallelGroup(Alignment.TRAILING)
                        .addComponent(jButtonRefreshNeighbors, GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                        .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                        .addComponent(jButtonForceHeartbeat, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );
        gl_jPanel5.setVerticalGroup(
                gl_jPanel5.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel5.createSequentialGroup()
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                                .addGap(5)
                                .addComponent(jButtonRefreshNeighbors)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jButtonForceHeartbeat)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(136, Short.MAX_VALUE))
        );
        jTextAreaNeighbors = new javax.swing.JTextArea();
        jScrollPane1.setViewportView(jTextAreaNeighbors);

        jTextAreaNeighbors.setColumns(20);
        jTextAreaNeighbors.setEditable(false);
        jTextAreaNeighbors.setRows(5);
        jPanel5.setLayout(gl_jPanel5);

        jButtonRefreshResolver.setText("show current resolver");
        jButtonRefreshResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshResolverActionPerformed(evt);
            }
        });

        jTextAreaResolverDatabase.setColumns(20);
        jTextAreaResolverDatabase.setEditable(false);
        jTextAreaResolverDatabase.setRows(5);
        jScrollPane2.setViewportView(jTextAreaResolverDatabase);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Resolver Database");

        javax.swing.GroupLayout gl_jPanel6 = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(gl_jPanel6);
        gl_jPanel6.setHorizontalGroup(
                gl_jPanel6.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonRefreshResolver, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );
        gl_jPanel6.setVerticalGroup(
                gl_jPanel6.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel6.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRefreshResolver)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout gl_jPanel7 = new javax.swing.GroupLayout(jPanel7);
        gl_jPanel7.setHorizontalGroup(
                gl_jPanel7.createParallelGroup(Alignment.TRAILING)
                        .addGroup(gl_jPanel7.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        gl_jPanel7.setVerticalGroup(
                gl_jPanel7.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_jPanel7.createParallelGroup(Alignment.TRAILING, false)
                                .addComponent(jPanel5, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel6, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7.setLayout(gl_jPanel7);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(rampLogo));

        javax.swing.GroupLayout gl_jPanel8 = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(gl_jPanel8);
        gl_jPanel8.setHorizontalGroup(
                gl_jPanel8.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel8.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addContainerGap(10, Short.MAX_VALUE))
        );
        gl_jPanel8.setVerticalGroup(
                gl_jPanel8.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gl_jPanel8.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addContainerGap(10, Short.MAX_VALUE))
        );

        jLabelLogging.setText("Release date: " + RampEntryPoint.releaseDate);

       /* jCheckBoxLogging.setText("logging");
        jCheckBoxLogging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLoggingActionPerformed(evt);
            }
        });*/

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
                layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                                        .addComponent(jPanel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        //.addComponent(jPanel9, GroupLayout.PREFERRED_SIZE, 243, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(6)
                                                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                                                        .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(17)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(ComponentPlacement.RELATED)
                                                .addGap(1)
                                                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jPanel7, GroupLayout.PREFERRED_SIZE, 267, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 299, GroupLayout.PREFERRED_SIZE))
                                .addGap(10))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshNeighborsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshNeighborsActionPerformed
        try {
            String text = "";
            String[] neighbors = ramp.getCurrentNeighbors();
            for (int i = 0; i < neighbors.length; i++) {
                text = text + i + " " + neighbors[i] + "\n";
            }
            jTextAreaNeighbors.setText(text);
        } catch (Exception e) {
            jTextAreaNeighbors.setText(e.toString());
        }
    }//GEN-LAST:event_jButtonRefreshNeighborsActionPerformed

    private void jchckbxWebServerActionPerformed(ActionEvent evt) {
        //STEFANO LANZONE
//    	boolean selected = this.jCheckBoxSecurityManager.getModel().isSelected();


//		if(selected){
//		    try{
//		    	SecureJoinEntrypoint.getInstance();
//		    }
//		    catch(Exception e){
//		    	this.jCheckBoxSecurityManager.getModel().setSelected(false);
//		    	e.printStackTrace();
//		    	JOptionPane.showMessageDialog(null, ""+e, "Error!", JOptionPane.ERROR_MESSAGE);
//		    }
//		}
//		else{
//			SecureJoinEntrypoint.deactivate();
//		}
    }


    private void jButtonRefreshResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshResolverActionPerformed
        /*String text="";
        if(resolver==null){
            text="Resolver INACTIVE";
        }
        else{
            HashMap<String,Long> lastDB = resolver.getLastSearchDatabase();
            HashMap<String,Vector<ResolverPath>> resolverDB = resolver.getResolverDatabase();
            Set<String> keysSet = resolverDB.keySet();
            String[] keys = new String[keysSet.size()];
            keys = keysSet.toArray(keys);
            for(int i=0; i<keys.length; i++){
                String id = keys[i];
                Vector<ResolverPath> paths = resolverDB.get(id);
                Long last = lastDB.get(id);
                text=text+i+") id="+id+" paths="+paths+" (lastBroadcast="+last+")\n";
            }
        }
        jTextAreaResolverDatabase.setText(text);*/
    }//GEN-LAST:event_jButtonRefreshResolverActionPerformed

    private void jComboBoxLocalClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLocalClientsActionPerformed
        // do nothing...
    }//GEN-LAST:event_jComboBoxLocalClientsActionPerformed

    private void jButtonRefreshLocalServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshLocalServicesActionPerformed
        try {
            String text = "";
            ArrayList<String> services = ramp.getServices();
            int count = 0;
            for (int i = 0; i < services.size(); i++) {
                String name = services.get(i);
                text += name + "\n";
                count++;
            }
            jTextAreaLocalServices.setText(text);

            String[] items = new String[count];
            count = 0;
            for (int i = 0; i < services.size(); i++) {
                String name = services.get(i);
                items[count] = name;
                count++;
            }

            DefaultComboBoxModel dcm = new DefaultComboBoxModel(items);
            jComboBoxLocalServices.setModel(dcm);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRefreshLocalServicesActionPerformed

    private void jButtonStartSelectedServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartSelectedServiceActionPerformed
        // start via reflection the selected local service
        try {
            String className = jComboBoxLocalServices.getSelectedItem().toString();
            ramp.startService(className);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonStartSelectedServiceActionPerformed

    private void jButtonRefreshLocalClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshLocalClientsActionPerformed
        try {
            String text = "";
            ArrayList<String> clients = ramp.getClients();
            int count = 0;
            for (int i = 0; i < clients.size(); i++) {
                String name = clients.get(i);
                text += name + "\n";
                count++;
            }
            jTextAreaLocalClients.setText(text);

            String[] items = new String[count];
            count = 0;
            for (int i = 0; i < clients.size(); i++) {
                String name = clients.get(i);
                items[count] = name;
                count++;
            }

            DefaultComboBoxModel dcm = new DefaultComboBoxModel(items);
            jComboBoxLocalClients.setModel(dcm);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRefreshLocalClientsActionPerformed

    private void jButtonStartLocalClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartLocalClientsActionPerformed
        // invoke via reflection the selected remote service
        try {
            String className = jComboBoxLocalClients.getSelectedItem().toString();
            ramp.startClient(className);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonStartLocalClientsActionPerformed

    /*private void jButtonSetLocalNodeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetLocalNodeIdActionPerformed
        ramp.setNodeId(jTextFieldNewLocalNodeId.getText());
        jTextFieldCurrentLocalNodeId.setText(ramp.getNodeIdString());
    }*///GEN-LAST:event_jButtonSetLocalNodeIdActionPerformed

    private void jTextFieldCurrentBufferSizeManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCurrentBufferSizeManagerActionPerformed
        // do nothing
    }//GEN-LAST:event_jTextFieldCurrentBufferSizeManagerActionPerformed

    private void jButtonChangeLocalBufferSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeLocalBufferSizeActionPerformed
        try {
            int newLocalBufferSize = Integer.parseInt(this.jTextFieldNewLocalBufferSize.getText());
            ramp.setBufferSize(newLocalBufferSize);
            this.jTextFieldCurrentBufferSizeManager.setText("" + ramp.getBufferSize());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonChangeLocalBufferSizeActionPerformed

    private void jCheckBoxUpnpProxyActionPerformed(ActionEvent arg0) {
        boolean selected = this.jCheckBoxUpnpProxy.getModel().isSelected();
//		if(selected)
//			UpnpProxyEntrypoint.getInstance();
//		else
//			UpnpProxyEntrypoint.deactivate();

    }

    private void jCheckBoxContinuityManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxContinuityManagerActionPerformed
        boolean selected = this.jCheckBoxContinuityManager.getModel().isSelected();
        if (selected) {
            ContinuityManager.getInstance(true);
            this.chckbxPeriodicMultihopBeat.setEnabled(true);
        } else {
            this.chckbxPeriodicMultihopBeat.setEnabled(false);
            ContinuityManager.deactivate();
        }
        chckbxPeriodicMultihopBeatActionPerformed(null);
    }//GEN-LAST:event_jCheckBoxContinuityManagerActionPerformed

    private void chckbxPeriodicMultihopBeatActionPerformed(java.awt.event.ActionEvent evt) {
        boolean selected = chckbxPeriodicMultihopBeat.getModel().isSelected();
        ContinuityManager cm = ContinuityManager.getInstance(false);
        if (cm != null) {
            if (selected) {
                cm.startPeriodicMultihopBeat();
            } else {
                cm.stopPeriodicMultihopBeat();
            }
        }
    }

    private void jCheckBoxBufferSizeManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBufferSizeManagerActionPerformed
        boolean isSelected = this.jCheckBoxBufferSizeManager.getModel().isSelected();
        if (isSelected) {
            try {
                ramp.startBufferSizeManager();
                this.jTextFieldCurrentBufferSizeManager.setText("" + ramp.getBufferSize());
                this.jButtonChangeLocalBufferSize.setEnabled(true);
                this.jTextFieldNewLocalBufferSize.setEnabled(true);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            ramp.stopBufferSizeManager();
            this.jTextFieldCurrentBufferSizeManager.setText("deactivated");
            this.jButtonChangeLocalBufferSize.setEnabled(false);
            this.jTextFieldNewLocalBufferSize.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxBufferSizeManagerActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // do nothing
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jCheckBoxLayer3RoutingManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLayer3RoutingManagerActionPerformed
        try {
            boolean isSelected = this.jCheckBoxLayer3RoutingManager.getModel().isSelected();
            if (isSelected) {
                try {
                    Layer3RoutingManager.getInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                    this.jCheckBoxLayer3RoutingManager.getModel().setSelected(false);
                    JOptionPane.showMessageDialog(
                            null,
                            e.getMessage(),
                            "Error!",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                Layer3RoutingManager.deactivate();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jCheckBoxLayer3RoutingManagerActionPerformed

    private void jButtonForceHeartbeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForceHeartbeatActionPerformed
        ramp.forceNeighborsUpdate();
    }//GEN-LAST:event_jButtonForceHeartbeatActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChangeLocalBufferSize;
    private javax.swing.JButton jButtonForceHeartbeat;
    private javax.swing.JButton jButtonRefreshLocalClients;
    private javax.swing.JButton jButtonRefreshLocalServices;
    private javax.swing.JButton jButtonRefreshNeighbors;
    private javax.swing.JButton jButtonRefreshResolver;
    //private javax.swing.JButton jButtonSetLocalNodeId;
    private javax.swing.JButton jButtonStartLocalClients;
    private javax.swing.JButton jButtonStartSelectedService;
    private javax.swing.JCheckBox jCheckBoxBufferSizeManager;
    private javax.swing.JCheckBox jCheckBoxContinuityManager;
    private javax.swing.JCheckBox chckbxPeriodicMultihopBeat;
    private javax.swing.JCheckBox jCheckBoxLayer3RoutingManager;
    private javax.swing.JComboBox jComboBoxLocalClients;
    private javax.swing.JComboBox jComboBoxLocalServices;
    private JCheckBox jCheckBoxSecurityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelLogging;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextAreaLocalClients;
    private javax.swing.JTextArea jTextAreaLocalServices;
    private javax.swing.JTextArea jTextAreaNeighbors;
    private javax.swing.JTextArea jTextAreaResolverDatabase;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldCurrentBufferSizeManager;
    private javax.swing.JTextField jTextFieldCurrentLocalNodeId;
    private javax.swing.JTextField jTextFieldNewLocalBufferSize;
    // private javax.swing.JTextField jTextFieldNewLocalNodeId;
    private JCheckBox jCheckBoxUpnpProxy;


}
